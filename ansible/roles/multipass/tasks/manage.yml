---
- name: Create vm_list variable dynamically
  ansible.builtin.set_fact:
    vm_list: "{{ inventory_hostname }}_{{ nodes | join('_') }}_vms"

- name: Debug
  ansible.builtin.debug:
    var: ansible_facts

- name: Get default route info (macOS only)
  command: route -n get default
  register: default_route_info
  changed_when: false
  when: ansible_default_ipv4.device is not defined

- name: Extract default interface
  set_fact:
    primary_interface: >-
      {{
        (default_route_info.stdout_lines
          | select('search', '^ *interface: ')
          | list
          | first
          | regex_replace('^ *interface: ', '')
          | trim())
      }}
  when: ansible_default_ipv4.device is not defined

- name: Create a Multipass VMs
  ibiscardigan.multipass.hosts:
    name: "{{ item }}"
    image: "{{ hostvars[item]['image'] | default('lts') }}"
    cpus: "{{ hostvars[item]['cores'] | default(1) }}"
    memory: "{{ hostvars[item]['memory'] | default(1) }}G"
    disk: "{{ hostvars[item]['storage'] | default(4) }}G"
    cloud_init: "{{ role_path }}/files/cloud-init.yml"
    network: "{{ ansible_default_ipv4.device | default(primary_interface) }}"
    state: present
  loop: "{{ groups[vm_list] }}"
  register: created_vms

- name: Check multipass list
  ibiscardigan.multipass.list:
  register: active_list

- name: Set dynamic desired VM subnet prefix based on hypervisor ansible_host
  ansible.builtin.set_fact:
    desired_vm_subnet_prefix: "{{ ansible_host.split('.')[0:3] | join('.') }}"

- name: Inject ansible_host for each desired VM
  ansible.builtin.add_host:
    name: "{{ item.key }}"
    ansible_host: >-
      {{
        (item.value.ipv4 | default([]))
        | select('search', '^' ~ desired_vm_subnet_prefix | regex_escape ~ '\.')
        | list
        | first
      }}
  loop: "{{ active_list.instances | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key in groups[vm_list]
  changed_when: false

- name: Debug ansible_host for each VM in {{ vm_group }}
  ansible.builtin.debug:
    msg: "{{ item }} â†’ {{ hostvars[item].ansible_host }}"
  loop: "{{ groups[inventory_hostname ~ '_' ~ (nodes | join('_')) ~ '_vms'] }}"
  loop_control:
    label: "{{ item }}"

- name: Compute running VMs to remove
  set_fact:
    unwanted_vms: >-
      {{ active_list.instances
         | dict2items
         | selectattr('value.state','equalto','Running')
         | map(attribute='key')
         | list
         | difference( groups[vm_list] )
      }}

- name: Debug unwanted_vms
  debug:
    var: unwanted_vms

- name: Delete running VMs not in desired list
  ibiscardigan.multipass.hosts:
    name: "{{ item }}"
    state: absent
  loop: "{{ unwanted_vms }}"
  when: unwanted_vms | length > 0
