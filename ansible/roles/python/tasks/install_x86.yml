---
- name: Set number of parallel jobs for make based on memory
  ansible.builtin.set_fact:
    make_jobs: "{{ '1' if ansible_memtotal_mb < 1024 else ansible_processor_vcpus | default(2) }}"

- name: Debug make_jobs
  ansible.builtin.debug:
    var: make_jobs

- name: Install build-essential
  ansible.builtin.apt:
    name: build-essential
    state: present
    update_cache: yes
  become: true

- name: Ensure all Python build dependencies are installed
  ansible.builtin.apt:
    name: "{{ python_x86_apt_dependencies }}"
    state: present
    update_cache: yes
  become: yes

- name: Download Python source
  ansible.builtin.get_url:
    url: "{{ python_src_url }}"
    dest: "/tmp/Python-{{ python_target_version }}.tgz"
    mode: '0666'

- name: Extract Python source
  ansible.builtin.unarchive:
    src: "/tmp/Python-{{ python_target_version }}.tgz"
    dest: "/tmp"
    remote_src: yes

- name: Check for existing Python binary
  ansible.builtin.stat:
    path: "{{ python_prefix }}/bin/python{{ python_target_version.split('.')[0:2] | join('.') }}"
  register: python_bin

- name: Compile and install Python {{ python_target_version }}
  ansible.builtin.shell: |
    ./configure --prefix={{ python_prefix }} --enable-optimizations
    make -j{{ make_jobs }}
    make altinstall
  args:
    chdir: "/tmp/Python-{{ python_target_version }}"
    creates: "{{ python_prefix }}/bin/python{{ python_target_version.split('.')[0:2] | join('.') }}"
    executable: /bin/bash
  become: true
  when: not python_bin.stat.exists

- name: Compute interpreter path for altinstalled Python
  ansible.builtin.set_fact:
    computed_python_interpreter: >-
      {{ python_prefix }}/bin/python{{ python_target_version.split('.')[0:2] | join('.') }}
