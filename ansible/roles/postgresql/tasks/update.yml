---
- name: Configure postgresql.conf
  ansible.builtin.template:
    src: postgresql.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0644'
  notify:
    - Restart PostgreSQL
    - Validate Postgres

- name: Ensure PostgreSQL service is enabled and started
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: yes

- name: Check if postgres user already has a password
  ansible.builtin.shell: >
    timeout 5 sudo -u postgres psql -tAc "SELECT passwd IS NOT NULL FROM pg_shadow WHERE usename='postgres';"
  register: postgres_password_check
  changed_when: false
  failed_when: postgres_password_check.rc not in [0, 124]

- name: Set postgres password via peer auth before forcing md5
  ansible.builtin.command: >
    sudo -u postgres psql -c "ALTER USER postgres PASSWORD '{{ postgresql_passwords.default }}';"
  args:
    executable: /bin/bash
  when:
    - postgresql_postgres_password is defined
    - postgres_password_check.stdout is defined
    - postgres_password_check.stdout.strip() == "f"

- name: Configure pg_hba.conf
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: '0640'
  notify:
    - Restart PostgreSQL
    - Validate Postgres

- name: Include users.yml from defaults
  ansible.builtin.include_vars:
    file: "{{ role_path }}/defaults/users.yml"
    name: postgresql_users_data

- name: Set postgresql_users fact
  ansible.builtin.set_fact:
    postgresql_users: "{{ postgresql_users_data.postgresql_users }}"

- name: Ensure users exist for this Postgres instance
  community.postgresql.postgresql_user:
    name: "{{ item.value.name }}"
    password: "{{ item.value.password }}"
    encrypted: true
    login_user: postgres
    login_password: "{{ postgresql_passwords.default }}"
  loop: "{{ postgresql_users[datastores.postgres] | dict2items }}"
  failed_when: false
