job "postgres-{{ item.name }}" {
  constraint {
    attribute = "${meta.domain}"
    value     = "{{ item.domain }}"
  }
  constraint {
    attribute = "${meta.class}"
    value     = "data"
  }

  datacenters = ["{{ meta_datacenter }}"]
  type = "service"

  group "postgres-{{ item.name }}" {
    count = {{ item.replicas }}

    restart {
      attempts = 0
      interval = "5m"
      delay    = "15s"
      mode     = "fail"
    }

    volume "data" {
      type      = "{{ item.storage.type }}"
      source    = "pg-{{ item.name }}"
      read_only = false
    }

    network {
      port "db" {
        static = {{ postgres_port }}
      }
    }

    task "patroni" {
      driver = "docker"

      config {
        image = "ghcr.io/ibiscardigan/patroni-timescale:pg17-v1"
        ports = ["db"]
        volumes = [
          "data:/var/lib/postgresql/data",
          "{{ item.patroni_mount_path }}:/etc/patroni/patroni.yml"
        ]
        args = [
          "/opt/patroni-venv/bin/patroni",
          "/etc/patroni/patroni-{{ item.name }}.yml"
        ]
        extra_hosts = [
          "host.docker.internal:host-gateway"
        ]
      }

      resources {
        cpu    = 100
        memory = 128
        # no network block here
      }

      service {
        name = "{{ item.name }}{{ item.consul.service_name_suffix }}"
        port = "db"

        tags = [
          "domain={{ item.domain }}"{% if item.metadata %},
          {% for k, v in item.metadata.items() -%}
          "{{ k }}={{ v }}"{% if not loop.last %},{% endif %}
          {% endfor %}{% endif %}
        ]

        check {
          type     = "tcp"
          port     = "db"
          interval = "10s"
          timeout  = "2s"
        }
      }
    }
  }
}
