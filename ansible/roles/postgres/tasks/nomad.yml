---
- name: Mark items as changed if Nomad submitted or created them
  ansible.builtin.set_fact:
    _dummy: true  # no-op, just triggers loop evaluation
  loop: "{{ result.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  changed_when: "'submitted' in item.stdout or 'created' in item.stdout"

- name: Find all Postgres job files on this node
  ansible.builtin.find:
    paths: "/opt/nomad/jobs"
    patterns: "^postgres-.*\\.nomad$"
  register: job_files

- name: Compute expected rendered job filenames
  ansible.builtin.set_fact:
    expected_job_files: >-
      {{ (postgres_clusters_merged | default([])) | map(attribute='name') | map('regex_replace', '^', 'postgres-') | map('regex_replace', '$', '.nomad') | list }}

- name: Determine orphaned job specs on this node
  ansible.builtin.set_fact:
    orphaned_job_specs: >-
      {{ job_files.files | map(attribute='path') | map('basename') | difference(expected_job_files) | list }}

- name: Delete orphaned job spec files (do not deregister)
  ansible.builtin.file:
    path: "/opt/nomad/jobs/{{ item }}"
    state: absent
  loop: "{{ orphaned_job_specs }}"

- name: Get all Nomad jobs (text output fallback)
  ansible.builtin.command:
    cmd: nomad job status
  register: all_jobs
  changed_when: false

- name: Set regex pattern for target domain
  ansible.builtin.set_fact:
    postgres_job_pattern: "^postgres-{{ meta_domain }}-"

- name: Extract Postgres jobs for domain
  ansible.builtin.set_fact:
    postgres_jobs_for_domain: >-
      {{
        all_jobs.stdout_lines
        | select('match', postgres_job_pattern)
        | map('split') | map('first')
        | list
      }}

- name: Determine obsolete Postgres jobs
  ansible.builtin.set_fact:
    obsolete_postgres_jobs: >-
      {{
        postgres_jobs_for_domain
        | difference(
            ( postgres_clusters_merged | default([]) )
            | selectattr('domain', 'equalto', target_domain)
            | map(attribute='name')
            | map('regex_replace', '^', 'postgres-')
            | list
          )
      }}

- name: Deregister obsolete Postgres jobs
  ansible.builtin.command:
    cmd: ["nomad", "job", "stop", "-purge", "{{ item }}"]
  delegate_to: "{{ groups['nomad_servers'][0] }}"
  loop: "{{ obsolete_postgres_jobs }}"
  loop_control:
    label: "{{ item }}"
  register: dereg_result
  failed_when: >
    dereg_result.rc != 0 and
    ('No job(s)' not in dereg_result.stderr)
  changed_when: "'deregistered' in dereg_result.stdout"
