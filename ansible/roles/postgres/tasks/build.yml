---
- name: Ensure /tmp/patroni-build exists
  ansible.builtin.file:
    path: /tmp/patroni-build
    state: directory
    mode: "0755"

- name: Copy build context to remote hosts
  ansible.builtin.copy:
    src: "{{ role_path }}/files/dockerfile"
    dest: /tmp/patroni-build/Dockerfile
    mode: "0755"

- name: Calculate checksum of Dockerfile
  ansible.builtin.slurp:
    src: /tmp/patroni-build/Dockerfile
  register: dockerfile_content

- name: Set image hash fact
  ansible.builtin.set_fact:
    patroni_image_checksum: "{{ dockerfile_content.content | b64decode | hash('sha1') }}"

- name: Check if checksum file exists
  ansible.builtin.stat:
    path: /tmp/patroni-build/.last_build_checksum
  register: checksum_stat

- name: Read previous checksum
  ansible.builtin.slurp:
    src: /tmp/patroni-build/.last_build_checksum
  register: previous_checksum
  when: checksum_stat.stat.exists

- name: Set previous checksum
  ansible.builtin.set_fact:
    last_patroni_image_checksum: "{{ previous_checksum.content | b64decode }}"
  when: checksum_stat.stat.exists

- name: Determine if rebuild is needed
  ansible.builtin.set_fact:
    patroni_image_changed: "{{ patroni_image_checksum != last_patroni_image_checksum | default('') }}"

- name: Build and deploy block
  when: patroni_image_changed | bool
  run_once: true
  block:
    - name: Log in to GHCR
      community.docker.docker_login:
        registry_url: ghcr.io
        username: ibiscardigan
        password: "{{ github_packages_pat }}"
      become: true

    - name: Build Patroni-Timescale image
      community.docker.docker_image:
        name: ghcr.io/ibiscardigan/patroni-timescale
        tag: pg17-v1
        build:
          path: /tmp/patroni-build
        source: build
        push: false
        force_source: true
      become: true

    - name: Push Patroni-Timescale image to GHCR
      community.docker.docker_image:
        name: ghcr.io/ibiscardigan/patroni-timescale
        tag: pg17-v1
        source: local
        push: true
      become: true

    - name: Render required Postgres job specs
      ansible.builtin.template:
        src: "postgres.nomad.j2"
        dest: "/opt/nomad/jobs/{{ item.name }}.nomad"
        mode: "0644"
      loop: "{{ postgres_clusters_merged | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      become: true

    - name: Register required Postgres jobs with Nomad
      ansible.builtin.command: >
        nomad job run /opt/nomad/jobs/{{ item.name }}.nomad
      loop: "{{ postgres_clusters_merged | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      register: result
      changed_when: false
      run_once: true
