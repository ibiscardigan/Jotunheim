---
- name: Dynamically group all hypervisor-enabled hosts
  hosts: all
  gather_facts: false

  tasks:
    - name: Group as "dynamic_hypervisors" if any hypervisor is true
      ansible.builtin.group_by:
        key: dynamic_hypervisors
      when: >
        (hostvars[inventory_hostname].hypervisors.multipass | default(false)) or
        (hostvars[inventory_hostname].hypervisors.proxmox | default(false))
      changed_when: false

- name: Filter dynamic hypervisors against nodes list
  hosts: dynamic_hypervisors
  gather_facts: false
  vars:
    resolved_nodes: >-
      {{
        nodes | default([]) | flatten
        | map('extract', groups)
        | select('defined')
        | flatten
        | union(
            nodes | default([]) | flatten
            | select('in', groups['all'])
          )
        | unique
      }}

  tasks:
    - name: Add host to final_hypervisors group if it matches resolved nodes
      ansible.builtin.group_by:
        key: final_hypervisors
      when: inventory_hostname in resolved_nodes
      changed_when: false

- name: Show dynamic groups and final target hosts
  hosts: localhost
  gather_facts: false
  vars:
    resolved_nodes: >-
      {{
        nodes | default([]) | flatten
        | map('extract', groups)
        | select('defined')
        | flatten
        | union(
            nodes | default([]) | flatten
            | select('in', groups['all'])
          )
        | unique
      }}

  tasks:
    - name: Show hosts in dynamic_hypervisors
      ansible.builtin.debug:
        var: groups['dynamic_hypervisors']

    - name: Show resolved nodes
      ansible.builtin.debug:
        var: resolved_nodes

    - name: Show final provision targets
      ansible.builtin.debug:
        var: groups['final_hypervisors']

- name: Provision the hypervisors and manage the VMs
  hosts: final_hypervisors
  gather_facts: true
  environment:
    PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

  tasks:
    - name: Multipass remove hosts
      when: >
        hostvars[inventory_hostname].hypervisors is defined and
        hostvars[inventory_hostname].hypervisors.multipass | default(false) and
        ansible_system == 'Darwin'
      block:
        - name: Create vm_list variable dynamically
          ansible.builtin.set_fact:
            vm_list: "{{ inventory_hostname }}_{{ nodes | join('_') }}_vms"

        - name: Delete running VMs
          ibiscardigan.multipass.hosts:
            name: "{{ item }}"
            state: absent
          loop: "{{ groups[vm_list] }}"

        - name: Load base host attributes
          ansible.builtin.set_fact:
            base_attrs: >-
              {{ lookup('file', playbook_dir + '/../group_vars/all/base_host_attributes.yml')
                | from_yaml }}
          run_once: true
          vars:
            ansible_cacheable: true

        - name: Set ansible_python_interpreter and pip_executable per host
          vars:
            host_var_prep_host_vars_path: "{{ ansible_env.HOME }}/Jotunheim/ansible/host_vars"
            hostfile: "{{ host_var_prep_host_vars_path }}/{{ item }}.yml"
            existing: >-
              {{ lookup('file', hostfile) | default('', true) | from_yaml | default({}, true) }}
            python_interp: "{{ base_attrs.ansible_python_interpreter }}"
            merged: >-
              {{ existing
                | combine({
                    'ansible_python_interpreter': python_interp,
                    'pip_executable': '/usr/bin/pip3'
                  }, recursive=True) }}
            merged_yaml: "{{ merged | to_nice_yaml(indent=0) | regex_replace('^---\\n', '') }}"
          ansible.builtin.copy:
            dest: "{{ hostfile }}"
            content: "{{ merged_yaml }}"
            mode: '0644'
          loop: "{{ groups[vm_list] }}"
          loop_control:
            loop_var: item
          notify:
            - Refresh inventory
          changed_when: false
